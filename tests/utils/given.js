"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const chance = require('chance').Chance();
// needs number, special char, upper and lower case
const random_password = () => `${chance.string({ length: 8 })}B!gM0uth`;
const an_authenticated_user = async () => {
    const cognito = new AWS.CognitoIdentityServiceProvider();
    // we already had this variable defined in serverless.yml for the get-index handler.
    const userpoolId = process.env.cognito_user_pool_id;
    // we need this value from the environement but we don't need it in ANY of our functions!
    const clientId = process.env.cognito_server_client_id;
    const firstName = chance.first({ nationality: "en" });
    const lastName = chance.last({ nationality: "en" });
    const suffix = chance.string({ length: 8, pool: "abcdefghijklmnopqrstuvwxyz" });
    const username = `test-${firstName}-${lastName}-${suffix}`;
    const password = random_password();
    const email = `${firstName}-${lastName}@big-mouth.com`;
    const createReq = {
        UserPoolId: userpoolId,
        Username: email,
        MessageAction: 'SUPPRESS',
        TemporaryPassword: password,
        UserAttributes: [
            { Name: "given_name", Value: firstName },
            { Name: "family_name", Value: lastName },
            { Name: "email", Value: email }
        ]
    };
    // using admin privalages to create a user manually
    await cognito.adminCreateUser(createReq).promise();
    console.log(`[${username}] - user is created`);
    const req = {
        AuthFlow: 'ADMIN_NO_SRP_AUTH',
        UserPoolId: userpoolId,
        ClientId: clientId,
        AuthParameters: {
            USERNAME: email,
            PASSWORD: password
        }
    };
    const resp = await cognito.adminInitiateAuth(req).promise();
    console.log(`[${username}] - initialised auth flow`);
    const challengeReq = {
        UserPoolId: userpoolId,
        ClientId: clientId,
        ChallengeName: resp.ChallengeName,
        Session: resp.Session,
        ChallengeResponses: {
            USERNAME: email,
            NEW_PASSWORD: random_password()
        }
    };
    const challengeResp = await cognito.adminRespondToAuthChallenge(challengeReq).promise();
    console.log(`[${username}] - responded to auth challenge`);
    return {
        username,
        firstName,
        lastName,
        idToken: challengeResp.AuthenticationResult.IdToken
    };
};
exports.an_authenticated_user = an_authenticated_user;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l2ZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnaXZlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM5QixNQUFNLE1BQU0sR0FBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7QUFFMUMsbURBQW1EO0FBQ25ELE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQyxVQUFVLENBQUE7QUFFdEUsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxDQUFBO0lBQ3hELG9GQUFvRjtJQUNwRixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFBO0lBQ25ELHlGQUF5RjtJQUN6RixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFBO0lBRXJELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNyRCxNQUFNLFFBQVEsR0FBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDcEQsTUFBTSxNQUFNLEdBQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixFQUFDLENBQUMsQ0FBQTtJQUNoRixNQUFNLFFBQVEsR0FBSSxRQUFRLFNBQVMsSUFBSSxRQUFRLElBQUksTUFBTSxFQUFFLENBQUE7SUFDM0QsTUFBTSxRQUFRLEdBQUksZUFBZSxFQUFFLENBQUE7SUFDbkMsTUFBTSxLQUFLLEdBQU8sR0FBRyxTQUFTLElBQUksUUFBUSxnQkFBZ0IsQ0FBQTtJQUUxRCxNQUFNLFNBQVMsR0FBRztRQUNoQixVQUFVLEVBQVUsVUFBVTtRQUM5QixRQUFRLEVBQVksS0FBSztRQUN6QixhQUFhLEVBQU8sVUFBVTtRQUM5QixpQkFBaUIsRUFBRyxRQUFRO1FBQzVCLGNBQWMsRUFBTTtZQUNsQixFQUFFLElBQUksRUFBRSxZQUFZLEVBQUcsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUN6QyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUN4QyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQVEsS0FBSyxFQUFFLEtBQUssRUFBRTtTQUN0QztLQUNGLENBQUE7SUFFRCxtREFBbUQ7SUFDbkQsTUFBTSxPQUFPLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRWxELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLHFCQUFxQixDQUFDLENBQUE7SUFFOUMsTUFBTSxHQUFHLEdBQUc7UUFDVixRQUFRLEVBQVUsbUJBQW1CO1FBQ3JDLFVBQVUsRUFBUSxVQUFVO1FBQzVCLFFBQVEsRUFBVSxRQUFRO1FBQzFCLGNBQWMsRUFBSTtZQUNoQixRQUFRLEVBQUUsS0FBSztZQUNmLFFBQVEsRUFBRSxRQUFRO1NBQ25CO0tBQ0YsQ0FBQTtJQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRTNELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLDJCQUEyQixDQUFDLENBQUE7SUFFcEQsTUFBTSxZQUFZLEdBQUc7UUFDbkIsVUFBVSxFQUFZLFVBQVU7UUFDaEMsUUFBUSxFQUFjLFFBQVE7UUFDOUIsYUFBYSxFQUFTLElBQUksQ0FBQyxhQUFhO1FBQ3hDLE9BQU8sRUFBZSxJQUFJLENBQUMsT0FBTztRQUNsQyxrQkFBa0IsRUFBSTtZQUNwQixRQUFRLEVBQUUsS0FBSztZQUNmLFlBQVksRUFBRSxlQUFlLEVBQUU7U0FDaEM7S0FDRixDQUFBO0lBQ0QsTUFBTSxhQUFhLEdBQUcsTUFBTSxPQUFPLENBQUMsMkJBQTJCLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFFdkYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsaUNBQWlDLENBQUMsQ0FBQTtJQUUxRCxPQUFPO1FBQ0wsUUFBUTtRQUNSLFNBQVM7UUFDVCxRQUFRO1FBQ1IsT0FBTyxFQUFFLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPO0tBQ3BELENBQUE7QUFDSCxDQUFDLENBQUE7QUFHQyxzREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJylcbmNvbnN0IGNoYW5jZSAgPSByZXF1aXJlKCdjaGFuY2UnKS5DaGFuY2UoKVxuXG4vLyBuZWVkcyBudW1iZXIsIHNwZWNpYWwgY2hhciwgdXBwZXIgYW5kIGxvd2VyIGNhc2VcbmNvbnN0IHJhbmRvbV9wYXNzd29yZCA9ICgpID0+IGAke2NoYW5jZS5zdHJpbmcoeyBsZW5ndGg6IDh9KX1CIWdNMHV0aGBcblxuY29uc3QgYW5fYXV0aGVudGljYXRlZF91c2VyID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjb2duaXRvID0gbmV3IEFXUy5Db2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIoKVxuICAvLyB3ZSBhbHJlYWR5IGhhZCB0aGlzIHZhcmlhYmxlIGRlZmluZWQgaW4gc2VydmVybGVzcy55bWwgZm9yIHRoZSBnZXQtaW5kZXggaGFuZGxlci5cbiAgY29uc3QgdXNlcnBvb2xJZCA9IHByb2Nlc3MuZW52LmNvZ25pdG9fdXNlcl9wb29sX2lkXG4gIC8vIHdlIG5lZWQgdGhpcyB2YWx1ZSBmcm9tIHRoZSBlbnZpcm9uZW1lbnQgYnV0IHdlIGRvbid0IG5lZWQgaXQgaW4gQU5ZIG9mIG91ciBmdW5jdGlvbnMhXG4gIGNvbnN0IGNsaWVudElkID0gcHJvY2Vzcy5lbnYuY29nbml0b19zZXJ2ZXJfY2xpZW50X2lkXG5cbiAgY29uc3QgZmlyc3ROYW1lID0gY2hhbmNlLmZpcnN0KHsgbmF0aW9uYWxpdHk6IFwiZW5cIiB9KVxuICBjb25zdCBsYXN0TmFtZSAgPSBjaGFuY2UubGFzdCh7IG5hdGlvbmFsaXR5OiBcImVuXCIgfSlcbiAgY29uc3Qgc3VmZml4ICAgID0gY2hhbmNlLnN0cmluZyh7bGVuZ3RoOiA4LCBwb29sOiBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCJ9KVxuICBjb25zdCB1c2VybmFtZSAgPSBgdGVzdC0ke2ZpcnN0TmFtZX0tJHtsYXN0TmFtZX0tJHtzdWZmaXh9YFxuICBjb25zdCBwYXNzd29yZCAgPSByYW5kb21fcGFzc3dvcmQoKVxuICBjb25zdCBlbWFpbCAgICAgPSBgJHtmaXJzdE5hbWV9LSR7bGFzdE5hbWV9QGJpZy1tb3V0aC5jb21gXG5cbiAgY29uc3QgY3JlYXRlUmVxID0ge1xuICAgIFVzZXJQb29sSWQgICAgICAgIDogdXNlcnBvb2xJZCxcbiAgICBVc2VybmFtZSAgICAgICAgICA6IGVtYWlsLFxuICAgIE1lc3NhZ2VBY3Rpb24gICAgIDogJ1NVUFBSRVNTJyxcbiAgICBUZW1wb3JhcnlQYXNzd29yZCA6IHBhc3N3b3JkLFxuICAgIFVzZXJBdHRyaWJ1dGVzICAgIDogW1xuICAgICAgeyBOYW1lOiBcImdpdmVuX25hbWVcIiwgIFZhbHVlOiBmaXJzdE5hbWUgfSxcbiAgICAgIHsgTmFtZTogXCJmYW1pbHlfbmFtZVwiLCBWYWx1ZTogbGFzdE5hbWUgfSxcbiAgICAgIHsgTmFtZTogXCJlbWFpbFwiLCAgICAgICBWYWx1ZTogZW1haWwgfVxuICAgIF1cbiAgfVxuXG4gIC8vIHVzaW5nIGFkbWluIHByaXZhbGFnZXMgdG8gY3JlYXRlIGEgdXNlciBtYW51YWxseVxuICBhd2FpdCBjb2duaXRvLmFkbWluQ3JlYXRlVXNlcihjcmVhdGVSZXEpLnByb21pc2UoKVxuXG4gIGNvbnNvbGUubG9nKGBbJHt1c2VybmFtZX1dIC0gdXNlciBpcyBjcmVhdGVkYClcbiAgXG4gIGNvbnN0IHJlcSA9IHtcbiAgICBBdXRoRmxvdyAgICAgICAgOiAnQURNSU5fTk9fU1JQX0FVVEgnLFxuICAgIFVzZXJQb29sSWQgICAgICA6IHVzZXJwb29sSWQsXG4gICAgQ2xpZW50SWQgICAgICAgIDogY2xpZW50SWQsXG4gICAgQXV0aFBhcmFtZXRlcnMgIDoge1xuICAgICAgVVNFUk5BTUU6IGVtYWlsLFxuICAgICAgUEFTU1dPUkQ6IHBhc3N3b3JkXG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBjb2duaXRvLmFkbWluSW5pdGlhdGVBdXRoKHJlcSkucHJvbWlzZSgpXG5cbiAgY29uc29sZS5sb2coYFske3VzZXJuYW1lfV0gLSBpbml0aWFsaXNlZCBhdXRoIGZsb3dgKVxuXG4gIGNvbnN0IGNoYWxsZW5nZVJlcSA9IHtcbiAgICBVc2VyUG9vbElkICAgICAgICAgIDogdXNlcnBvb2xJZCxcbiAgICBDbGllbnRJZCAgICAgICAgICAgIDogY2xpZW50SWQsXG4gICAgQ2hhbGxlbmdlTmFtZSAgICAgICA6IHJlc3AuQ2hhbGxlbmdlTmFtZSxcbiAgICBTZXNzaW9uICAgICAgICAgICAgIDogcmVzcC5TZXNzaW9uLFxuICAgIENoYWxsZW5nZVJlc3BvbnNlcyAgOiB7XG4gICAgICBVU0VSTkFNRTogZW1haWwsXG4gICAgICBORVdfUEFTU1dPUkQ6IHJhbmRvbV9wYXNzd29yZCgpXG4gICAgfVxuICB9XG4gIGNvbnN0IGNoYWxsZW5nZVJlc3AgPSBhd2FpdCBjb2duaXRvLmFkbWluUmVzcG9uZFRvQXV0aENoYWxsZW5nZShjaGFsbGVuZ2VSZXEpLnByb21pc2UoKVxuICBcbiAgY29uc29sZS5sb2coYFske3VzZXJuYW1lfV0gLSByZXNwb25kZWQgdG8gYXV0aCBjaGFsbGVuZ2VgKVxuXG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWUsXG4gICAgZmlyc3ROYW1lLFxuICAgIGxhc3ROYW1lLFxuICAgIGlkVG9rZW46IGNoYWxsZW5nZVJlc3AuQXV0aGVudGljYXRpb25SZXN1bHQuSWRUb2tlblxuICB9XG59XG5cbmV4cG9ydCB7IFxuICBhbl9hdXRoZW50aWNhdGVkX3VzZXIsXG59XG4iXX0=