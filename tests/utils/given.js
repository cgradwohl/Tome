"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const chance = require('chance').Chance();
// needs number, special char, upper and lower case
const random_password = () => `${chance.string({ length: 8 })}B!gM0uth`;
exports.an_authenticated_user = async () => {
    const cognito = new AWS.CognitoIdentityServiceProvider();
    // we already had this variable defined in serverless.yml for the get-index handler.
    const userpoolId = process.env.cognito_user_pool_id;
    // we need this value from the environement but we don't need it in ANY of our functions!
    const clientId = process.env.cognito_server_client_id;
    const firstName = chance.first({ nationality: "en" });
    const lastName = chance.last({ nationality: "en" });
    const suffix = chance.string({ length: 8, pool: "abcdefghijklmnopqrstuvwxyz" });
    const username = `test-${firstName}-${lastName}-${suffix}`;
    const password = random_password();
    const email = `${firstName}-${lastName}@big-mouth.com`;
    const createReq = {
        UserPoolId: userpoolId,
        Username: email,
        MessageAction: 'SUPPRESS',
        TemporaryPassword: password,
        UserAttributes: [
            { Name: "given_name", Value: firstName },
            { Name: "family_name", Value: lastName },
            { Name: "email", Value: email }
        ]
    };
    // using admin privalages to create a user manually
    await cognito.adminCreateUser(createReq).promise();
    console.log(`[${username}] - user is created`);
    const req = {
        AuthFlow: 'ADMIN_NO_SRP_AUTH',
        UserPoolId: userpoolId,
        ClientId: clientId,
        AuthParameters: {
            USERNAME: email,
            PASSWORD: password
        }
    };
    const resp = await cognito.adminInitiateAuth(req).promise();
    console.log(`[${username}] - initialised auth flow`);
    const challengeReq = {
        UserPoolId: userpoolId,
        ClientId: clientId,
        ChallengeName: resp.ChallengeName,
        Session: resp.Session,
        ChallengeResponses: {
            USERNAME: email,
            NEW_PASSWORD: random_password()
        }
    };
    const challengeResp = await cognito.adminRespondToAuthChallenge(challengeReq).promise();
    console.log(`[${username}] - responded to auth challenge`);
    return {
        username,
        firstName,
        lastName,
        idToken: challengeResp.AuthenticationResult.IdToken
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l2ZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnaXZlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM5QixNQUFNLE1BQU0sR0FBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7QUFFMUMsbURBQW1EO0FBQ25ELE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQyxVQUFVLENBQUE7QUFFekQsUUFBQSxxQkFBcUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUM5QyxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxDQUFBO0lBQ3hELG9GQUFvRjtJQUNwRixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFBO0lBQ25ELHlGQUF5RjtJQUN6RixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFBO0lBRXJELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNyRCxNQUFNLFFBQVEsR0FBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDcEQsTUFBTSxNQUFNLEdBQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLDRCQUE0QixFQUFDLENBQUMsQ0FBQTtJQUNoRixNQUFNLFFBQVEsR0FBSSxRQUFRLFNBQVMsSUFBSSxRQUFRLElBQUksTUFBTSxFQUFFLENBQUE7SUFDM0QsTUFBTSxRQUFRLEdBQUksZUFBZSxFQUFFLENBQUE7SUFDbkMsTUFBTSxLQUFLLEdBQU8sR0FBRyxTQUFTLElBQUksUUFBUSxnQkFBZ0IsQ0FBQTtJQUUxRCxNQUFNLFNBQVMsR0FBRztRQUNoQixVQUFVLEVBQVUsVUFBVTtRQUM5QixRQUFRLEVBQVksS0FBSztRQUN6QixhQUFhLEVBQU8sVUFBVTtRQUM5QixpQkFBaUIsRUFBRyxRQUFRO1FBQzVCLGNBQWMsRUFBTTtZQUNsQixFQUFFLElBQUksRUFBRSxZQUFZLEVBQUcsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUN6QyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUN4QyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQVEsS0FBSyxFQUFFLEtBQUssRUFBRTtTQUN0QztLQUNGLENBQUE7SUFFRCxtREFBbUQ7SUFDbkQsTUFBTSxPQUFPLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRWxELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLHFCQUFxQixDQUFDLENBQUE7SUFFOUMsTUFBTSxHQUFHLEdBQUc7UUFDVixRQUFRLEVBQVUsbUJBQW1CO1FBQ3JDLFVBQVUsRUFBUSxVQUFVO1FBQzVCLFFBQVEsRUFBVSxRQUFRO1FBQzFCLGNBQWMsRUFBSTtZQUNoQixRQUFRLEVBQUUsS0FBSztZQUNmLFFBQVEsRUFBRSxRQUFRO1NBQ25CO0tBQ0YsQ0FBQTtJQUNELE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBRTNELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLDJCQUEyQixDQUFDLENBQUE7SUFFcEQsTUFBTSxZQUFZLEdBQUc7UUFDbkIsVUFBVSxFQUFZLFVBQVU7UUFDaEMsUUFBUSxFQUFjLFFBQVE7UUFDOUIsYUFBYSxFQUFTLElBQUksQ0FBQyxhQUFhO1FBQ3hDLE9BQU8sRUFBZSxJQUFJLENBQUMsT0FBTztRQUNsQyxrQkFBa0IsRUFBSTtZQUNwQixRQUFRLEVBQUUsS0FBSztZQUNmLFlBQVksRUFBRSxlQUFlLEVBQUU7U0FDaEM7S0FDRixDQUFBO0lBQ0QsTUFBTSxhQUFhLEdBQUcsTUFBTSxPQUFPLENBQUMsMkJBQTJCLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7SUFFdkYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsaUNBQWlDLENBQUMsQ0FBQTtJQUUxRCxPQUFPO1FBQ0wsUUFBUTtRQUNSLFNBQVM7UUFDVCxRQUFRO1FBQ1IsT0FBTyxFQUFFLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPO0tBQ3BELENBQUE7QUFDSCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJylcbmNvbnN0IGNoYW5jZSAgPSByZXF1aXJlKCdjaGFuY2UnKS5DaGFuY2UoKVxuXG4vLyBuZWVkcyBudW1iZXIsIHNwZWNpYWwgY2hhciwgdXBwZXIgYW5kIGxvd2VyIGNhc2VcbmNvbnN0IHJhbmRvbV9wYXNzd29yZCA9ICgpID0+IGAke2NoYW5jZS5zdHJpbmcoeyBsZW5ndGg6IDh9KX1CIWdNMHV0aGBcblxuZXhwb3J0IGNvbnN0IGFuX2F1dGhlbnRpY2F0ZWRfdXNlciA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgY29nbml0byA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyKClcbiAgLy8gd2UgYWxyZWFkeSBoYWQgdGhpcyB2YXJpYWJsZSBkZWZpbmVkIGluIHNlcnZlcmxlc3MueW1sIGZvciB0aGUgZ2V0LWluZGV4IGhhbmRsZXIuXG4gIGNvbnN0IHVzZXJwb29sSWQgPSBwcm9jZXNzLmVudi5jb2duaXRvX3VzZXJfcG9vbF9pZFxuICAvLyB3ZSBuZWVkIHRoaXMgdmFsdWUgZnJvbSB0aGUgZW52aXJvbmVtZW50IGJ1dCB3ZSBkb24ndCBuZWVkIGl0IGluIEFOWSBvZiBvdXIgZnVuY3Rpb25zIVxuICBjb25zdCBjbGllbnRJZCA9IHByb2Nlc3MuZW52LmNvZ25pdG9fc2VydmVyX2NsaWVudF9pZFxuXG4gIGNvbnN0IGZpcnN0TmFtZSA9IGNoYW5jZS5maXJzdCh7IG5hdGlvbmFsaXR5OiBcImVuXCIgfSlcbiAgY29uc3QgbGFzdE5hbWUgID0gY2hhbmNlLmxhc3QoeyBuYXRpb25hbGl0eTogXCJlblwiIH0pXG4gIGNvbnN0IHN1ZmZpeCAgICA9IGNoYW5jZS5zdHJpbmcoe2xlbmd0aDogOCwgcG9vbDogXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwifSlcbiAgY29uc3QgdXNlcm5hbWUgID0gYHRlc3QtJHtmaXJzdE5hbWV9LSR7bGFzdE5hbWV9LSR7c3VmZml4fWBcbiAgY29uc3QgcGFzc3dvcmQgID0gcmFuZG9tX3Bhc3N3b3JkKClcbiAgY29uc3QgZW1haWwgICAgID0gYCR7Zmlyc3ROYW1lfS0ke2xhc3ROYW1lfUBiaWctbW91dGguY29tYFxuXG4gIGNvbnN0IGNyZWF0ZVJlcSA9IHtcbiAgICBVc2VyUG9vbElkICAgICAgICA6IHVzZXJwb29sSWQsXG4gICAgVXNlcm5hbWUgICAgICAgICAgOiBlbWFpbCxcbiAgICBNZXNzYWdlQWN0aW9uICAgICA6ICdTVVBQUkVTUycsXG4gICAgVGVtcG9yYXJ5UGFzc3dvcmQgOiBwYXNzd29yZCxcbiAgICBVc2VyQXR0cmlidXRlcyAgICA6IFtcbiAgICAgIHsgTmFtZTogXCJnaXZlbl9uYW1lXCIsICBWYWx1ZTogZmlyc3ROYW1lIH0sXG4gICAgICB7IE5hbWU6IFwiZmFtaWx5X25hbWVcIiwgVmFsdWU6IGxhc3ROYW1lIH0sXG4gICAgICB7IE5hbWU6IFwiZW1haWxcIiwgICAgICAgVmFsdWU6IGVtYWlsIH1cbiAgICBdXG4gIH1cblxuICAvLyB1c2luZyBhZG1pbiBwcml2YWxhZ2VzIHRvIGNyZWF0ZSBhIHVzZXIgbWFudWFsbHlcbiAgYXdhaXQgY29nbml0by5hZG1pbkNyZWF0ZVVzZXIoY3JlYXRlUmVxKS5wcm9taXNlKClcblxuICBjb25zb2xlLmxvZyhgWyR7dXNlcm5hbWV9XSAtIHVzZXIgaXMgY3JlYXRlZGApXG4gIFxuICBjb25zdCByZXEgPSB7XG4gICAgQXV0aEZsb3cgICAgICAgIDogJ0FETUlOX05PX1NSUF9BVVRIJyxcbiAgICBVc2VyUG9vbElkICAgICAgOiB1c2VycG9vbElkLFxuICAgIENsaWVudElkICAgICAgICA6IGNsaWVudElkLFxuICAgIEF1dGhQYXJhbWV0ZXJzICA6IHtcbiAgICAgIFVTRVJOQU1FOiBlbWFpbCxcbiAgICAgIFBBU1NXT1JEOiBwYXNzd29yZFxuICAgIH1cbiAgfVxuICBjb25zdCByZXNwID0gYXdhaXQgY29nbml0by5hZG1pbkluaXRpYXRlQXV0aChyZXEpLnByb21pc2UoKVxuXG4gIGNvbnNvbGUubG9nKGBbJHt1c2VybmFtZX1dIC0gaW5pdGlhbGlzZWQgYXV0aCBmbG93YClcblxuICBjb25zdCBjaGFsbGVuZ2VSZXEgPSB7XG4gICAgVXNlclBvb2xJZCAgICAgICAgICA6IHVzZXJwb29sSWQsXG4gICAgQ2xpZW50SWQgICAgICAgICAgICA6IGNsaWVudElkLFxuICAgIENoYWxsZW5nZU5hbWUgICAgICAgOiByZXNwLkNoYWxsZW5nZU5hbWUsXG4gICAgU2Vzc2lvbiAgICAgICAgICAgICA6IHJlc3AuU2Vzc2lvbixcbiAgICBDaGFsbGVuZ2VSZXNwb25zZXMgIDoge1xuICAgICAgVVNFUk5BTUU6IGVtYWlsLFxuICAgICAgTkVXX1BBU1NXT1JEOiByYW5kb21fcGFzc3dvcmQoKVxuICAgIH1cbiAgfVxuICBjb25zdCBjaGFsbGVuZ2VSZXNwID0gYXdhaXQgY29nbml0by5hZG1pblJlc3BvbmRUb0F1dGhDaGFsbGVuZ2UoY2hhbGxlbmdlUmVxKS5wcm9taXNlKClcbiAgXG4gIGNvbnNvbGUubG9nKGBbJHt1c2VybmFtZX1dIC0gcmVzcG9uZGVkIHRvIGF1dGggY2hhbGxlbmdlYClcblxuICByZXR1cm4ge1xuICAgIHVzZXJuYW1lLFxuICAgIGZpcnN0TmFtZSxcbiAgICBsYXN0TmFtZSxcbiAgICBpZFRva2VuOiBjaGFsbGVuZ2VSZXNwLkF1dGhlbnRpY2F0aW9uUmVzdWx0LklkVG9rZW5cbiAgfVxufVxuIl19