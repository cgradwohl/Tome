"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-var-requires */
const AWS = require('aws-sdk');
const chance = require('chance').Chance();
// needs number, special char, upper and lower case
const randomPassword = () => `${chance.string({ length: 8 })}B!gM0uth`;
const anAuthenticatedUser = async () => {
    const cognito = new AWS.CognitoIdentityServiceProvider();
    // we already had this variable defined in serverless.yml for the get-index handler.
    const userpoolId = process.env.cognito_user_pool_id;
    // we need this value from the environement but we don't need it in ANY of our functions!
    const clientId = process.env.cognito_server_client_id;
    const firstName = chance.first({ nationality: 'en' });
    const lastName = chance.last({ nationality: 'en' });
    const suffix = chance.string({ length: 8, pool: 'abcdefghijklmnopqrstuvwxyz' });
    const username = `test-${firstName}-${lastName}-${suffix}`;
    const password = randomPassword();
    const email = `${firstName}-${lastName}@big-mouth.com`;
    const createReq = {
        UserPoolId: userpoolId,
        Username: email,
        MessageAction: 'SUPPRESS',
        TemporaryPassword: password,
        UserAttributes: [
            { Name: 'given_name', Value: firstName },
            { Name: 'family_name', Value: lastName },
            { Name: 'email', Value: email },
        ],
    };
    // using admin privalages to create a user manually
    await cognito.adminCreateUser(createReq).promise();
    console.log(`[${username}] - user is created`);
    const req = {
        AuthFlow: 'ADMIN_NO_SRP_AUTH',
        UserPoolId: userpoolId,
        ClientId: clientId,
        AuthParameters: {
            USERNAME: email,
            PASSWORD: password,
        },
    };
    const resp = await cognito.adminInitiateAuth(req).promise();
    console.log(`[${username}] - initialised auth flow`);
    const challengeReq = {
        UserPoolId: userpoolId,
        ClientId: clientId,
        ChallengeName: resp.ChallengeName,
        Session: resp.Session,
        ChallengeResponses: {
            USERNAME: email,
            NEW_PASSWORD: randomPassword(),
        },
    };
    const challengeResp = await cognito.adminRespondToAuthChallenge(challengeReq).promise();
    console.log(`[${username}] - responded to auth challenge`);
    return {
        username,
        firstName,
        lastName,
        idToken: challengeResp.AuthenticationResult.IdToken,
    };
};
exports.anAuthenticatedUser = anAuthenticatedUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l2ZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnaXZlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVEQUF1RDtBQUN2RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBUTFDLG1EQUFtRDtBQUNuRCxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDO0FBRXZFLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxJQUFtQixFQUFFO0lBQ3BELE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLDhCQUE4QixFQUFFLENBQUM7SUFDekQsb0ZBQW9GO0lBQ3BGLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7SUFDcEQseUZBQXlGO0lBQ3pGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7SUFFdEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsNEJBQTRCLEVBQUUsQ0FBQyxDQUFDO0lBQ2hGLE1BQU0sUUFBUSxHQUFHLFFBQVEsU0FBUyxJQUFJLFFBQVEsSUFBSSxNQUFNLEVBQUUsQ0FBQztJQUMzRCxNQUFNLFFBQVEsR0FBRyxjQUFjLEVBQUUsQ0FBQztJQUNsQyxNQUFNLEtBQUssR0FBRyxHQUFHLFNBQVMsSUFBSSxRQUFRLGdCQUFnQixDQUFDO0lBRXZELE1BQU0sU0FBUyxHQUFHO1FBQ2hCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRSxLQUFLO1FBQ2YsYUFBYSxFQUFFLFVBQVU7UUFDekIsaUJBQWlCLEVBQUUsUUFBUTtRQUMzQixjQUFjLEVBQUU7WUFDZCxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUN4QyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUN4QyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtTQUNoQztLQUNGLENBQUM7SUFFRixtREFBbUQ7SUFDbkQsTUFBTSxPQUFPLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRW5ELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLHFCQUFxQixDQUFDLENBQUM7SUFFL0MsTUFBTSxHQUFHLEdBQUc7UUFDVixRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLGNBQWMsRUFBRTtZQUNkLFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFFLFFBQVE7U0FDbkI7S0FDRixDQUFDO0lBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsMkJBQTJCLENBQUMsQ0FBQztJQUVyRCxNQUFNLFlBQVksR0FBRztRQUNuQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUUsUUFBUTtRQUNsQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7UUFDakMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1FBQ3JCLGtCQUFrQixFQUFFO1lBQ2xCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsWUFBWSxFQUFFLGNBQWMsRUFBRTtTQUMvQjtLQUNGLENBQUM7SUFDRixNQUFNLGFBQWEsR0FBRyxNQUFNLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUV4RixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksUUFBUSxpQ0FBaUMsQ0FBQyxDQUFDO0lBRTNELE9BQU87UUFDTCxRQUFRO1FBQ1IsU0FBUztRQUNULFFBQVE7UUFDUixPQUFPLEVBQUUsYUFBYSxDQUFDLG9CQUFvQixDQUFDLE9BQU87S0FDcEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUlBLGtEQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMgKi9cbmNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmNvbnN0IGNoYW5jZSA9IHJlcXVpcmUoJ2NoYW5jZScpLkNoYW5jZSgpO1xuXG5pbnRlcmZhY2UgVXNlciB7XG4gIHVzZXJuYW1lOiBzdHJpbmcsXG4gIGZpcnN0TmFtZTogc3RyaW5nLFxuICBsYXN0TmFtZTogc3RyaW5nLFxuICBpZFRva2VuOiBzdHJpbmcsXG59XG4vLyBuZWVkcyBudW1iZXIsIHNwZWNpYWwgY2hhciwgdXBwZXIgYW5kIGxvd2VyIGNhc2VcbmNvbnN0IHJhbmRvbVBhc3N3b3JkID0gKCkgPT4gYCR7Y2hhbmNlLnN0cmluZyh7IGxlbmd0aDogOCB9KX1CIWdNMHV0aGA7XG5cbmNvbnN0IGFuQXV0aGVudGljYXRlZFVzZXIgPSBhc3luYyAoKTogUHJvbWlzZTxVc2VyPiA9PiB7XG4gIGNvbnN0IGNvZ25pdG8gPSBuZXcgQVdTLkNvZ25pdG9JZGVudGl0eVNlcnZpY2VQcm92aWRlcigpO1xuICAvLyB3ZSBhbHJlYWR5IGhhZCB0aGlzIHZhcmlhYmxlIGRlZmluZWQgaW4gc2VydmVybGVzcy55bWwgZm9yIHRoZSBnZXQtaW5kZXggaGFuZGxlci5cbiAgY29uc3QgdXNlcnBvb2xJZCA9IHByb2Nlc3MuZW52LmNvZ25pdG9fdXNlcl9wb29sX2lkO1xuICAvLyB3ZSBuZWVkIHRoaXMgdmFsdWUgZnJvbSB0aGUgZW52aXJvbmVtZW50IGJ1dCB3ZSBkb24ndCBuZWVkIGl0IGluIEFOWSBvZiBvdXIgZnVuY3Rpb25zIVxuICBjb25zdCBjbGllbnRJZCA9IHByb2Nlc3MuZW52LmNvZ25pdG9fc2VydmVyX2NsaWVudF9pZDtcblxuICBjb25zdCBmaXJzdE5hbWUgPSBjaGFuY2UuZmlyc3QoeyBuYXRpb25hbGl0eTogJ2VuJyB9KTtcbiAgY29uc3QgbGFzdE5hbWUgPSBjaGFuY2UubGFzdCh7IG5hdGlvbmFsaXR5OiAnZW4nIH0pO1xuICBjb25zdCBzdWZmaXggPSBjaGFuY2Uuc3RyaW5nKHsgbGVuZ3RoOiA4LCBwb29sOiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonIH0pO1xuICBjb25zdCB1c2VybmFtZSA9IGB0ZXN0LSR7Zmlyc3ROYW1lfS0ke2xhc3ROYW1lfS0ke3N1ZmZpeH1gO1xuICBjb25zdCBwYXNzd29yZCA9IHJhbmRvbVBhc3N3b3JkKCk7XG4gIGNvbnN0IGVtYWlsID0gYCR7Zmlyc3ROYW1lfS0ke2xhc3ROYW1lfUBiaWctbW91dGguY29tYDtcblxuICBjb25zdCBjcmVhdGVSZXEgPSB7XG4gICAgVXNlclBvb2xJZDogdXNlcnBvb2xJZCxcbiAgICBVc2VybmFtZTogZW1haWwsXG4gICAgTWVzc2FnZUFjdGlvbjogJ1NVUFBSRVNTJyxcbiAgICBUZW1wb3JhcnlQYXNzd29yZDogcGFzc3dvcmQsXG4gICAgVXNlckF0dHJpYnV0ZXM6IFtcbiAgICAgIHsgTmFtZTogJ2dpdmVuX25hbWUnLCBWYWx1ZTogZmlyc3ROYW1lIH0sXG4gICAgICB7IE5hbWU6ICdmYW1pbHlfbmFtZScsIFZhbHVlOiBsYXN0TmFtZSB9LFxuICAgICAgeyBOYW1lOiAnZW1haWwnLCBWYWx1ZTogZW1haWwgfSxcbiAgICBdLFxuICB9O1xuXG4gIC8vIHVzaW5nIGFkbWluIHByaXZhbGFnZXMgdG8gY3JlYXRlIGEgdXNlciBtYW51YWxseVxuICBhd2FpdCBjb2duaXRvLmFkbWluQ3JlYXRlVXNlcihjcmVhdGVSZXEpLnByb21pc2UoKTtcblxuICBjb25zb2xlLmxvZyhgWyR7dXNlcm5hbWV9XSAtIHVzZXIgaXMgY3JlYXRlZGApO1xuXG4gIGNvbnN0IHJlcSA9IHtcbiAgICBBdXRoRmxvdzogJ0FETUlOX05PX1NSUF9BVVRIJyxcbiAgICBVc2VyUG9vbElkOiB1c2VycG9vbElkLFxuICAgIENsaWVudElkOiBjbGllbnRJZCxcbiAgICBBdXRoUGFyYW1ldGVyczoge1xuICAgICAgVVNFUk5BTUU6IGVtYWlsLFxuICAgICAgUEFTU1dPUkQ6IHBhc3N3b3JkLFxuICAgIH0sXG4gIH07XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBjb2duaXRvLmFkbWluSW5pdGlhdGVBdXRoKHJlcSkucHJvbWlzZSgpO1xuXG4gIGNvbnNvbGUubG9nKGBbJHt1c2VybmFtZX1dIC0gaW5pdGlhbGlzZWQgYXV0aCBmbG93YCk7XG5cbiAgY29uc3QgY2hhbGxlbmdlUmVxID0ge1xuICAgIFVzZXJQb29sSWQ6IHVzZXJwb29sSWQsXG4gICAgQ2xpZW50SWQ6IGNsaWVudElkLFxuICAgIENoYWxsZW5nZU5hbWU6IHJlc3AuQ2hhbGxlbmdlTmFtZSxcbiAgICBTZXNzaW9uOiByZXNwLlNlc3Npb24sXG4gICAgQ2hhbGxlbmdlUmVzcG9uc2VzOiB7XG4gICAgICBVU0VSTkFNRTogZW1haWwsXG4gICAgICBORVdfUEFTU1dPUkQ6IHJhbmRvbVBhc3N3b3JkKCksXG4gICAgfSxcbiAgfTtcbiAgY29uc3QgY2hhbGxlbmdlUmVzcCA9IGF3YWl0IGNvZ25pdG8uYWRtaW5SZXNwb25kVG9BdXRoQ2hhbGxlbmdlKGNoYWxsZW5nZVJlcSkucHJvbWlzZSgpO1xuXG4gIGNvbnNvbGUubG9nKGBbJHt1c2VybmFtZX1dIC0gcmVzcG9uZGVkIHRvIGF1dGggY2hhbGxlbmdlYCk7XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VybmFtZSxcbiAgICBmaXJzdE5hbWUsXG4gICAgbGFzdE5hbWUsXG4gICAgaWRUb2tlbjogY2hhbGxlbmdlUmVzcC5BdXRoZW50aWNhdGlvblJlc3VsdC5JZFRva2VuLFxuICB9O1xufTtcblxuZXhwb3J0IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbiAgYW5BdXRoZW50aWNhdGVkVXNlcixcbn07XG4iXX0=